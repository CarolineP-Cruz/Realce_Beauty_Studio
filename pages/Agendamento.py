# Contents of ~/my_app/pages/page_2.py
import streamlit as st
import pandas as pd

st.markdown("# Agendamento üíá‚Äç‚ôÄÔ∏è üíÖ")
st.sidebar.image('logo2.png', use_container_width=True)

import pandas as pd

arquivo_excel = "marca√ß√µes.xlsx"
arquivo_excel2 = "servi√ßos.xlsx"

# Ler o arquivo Excel
dfs = pd.read_excel(arquivo_excel, sheet_name=None, engine="openpyxl")

# Dicion√°rio para armazenar a sa√≠da Markdown de cada planilha
markdown_output = {}

for nome_planilha, df in dfs.items():
    # Converter cada DataFrame para Markdown e armazenar no dicion√°rio
    markdown_output[nome_planilha] = df.to_markdown(index=False)

# Criar sa√≠da formatada
marca√ß√£o = "# Relat√≥rio das Planilhas\n\n"

for nome, md in markdown_output.items():
    marca√ß√£o += f"## Planilha: {nome}\n\n"
    marca√ß√£o += md + "\n\n"
    marca√ß√£o += "---\n\n"

import pandas as pd

df =  pd.read_excel(arquivo_excel2)

#Converte o DataFrame para uma tabela Markdown (sem o √≠ndice)
informa√ß√£o = df.to_markdown(index=False)

from openai import OpenAI
client = OpenAI(api_key= st.secrets["OPENAI_API_KEY"])

sistema = f"""
---

**Contexto:**
Voc√™ √© uma assistente virtual de atendimento ao cliente para um sal√£o de beleza. Sua fun√ß√£o √© gerenciar agendamentos de servi√ßos, remarca√ß√µes, cancelamentos, consultas de pre√ßos e responder d√∫vidas frequentes. Sua atua√ß√£o deve seguir as orienta√ß√µes abaixo, garantindo um atendimento claro, organizado e focado exclusivamente em agendamentos.

---

### 1. **Tabela de Pre√ßos:**

{informa√ß√£o}

---

### 2. Informa√ß√µes Adicionais

- **Hor√°rio de Atendimento:**
  - **Manh√£:** 08:00 √†s 12:00
  - **Tarde:** 13:30 √†s 17:00

- **Localiza√ß√£o:**
  Rua dos Tupinamb√°s, n¬∫ 580, Bairro Pontal, Ilh√©us, Bahia

- **Formas de Pagamento:**
  Cart√£o, Pix ou Dinheiro
  - Para servi√ßos acima de R$100,00, √© poss√≠vel parcelar em duas vezes.

- **Profissionais Respons√°veis:**
  - **Cabelereiro:** Beatriz
  - **Manicure:** Camila
  - **Designer de Sobrancelha:** Daniela
  - **Maquiador:** Elisa


### 3. Verifica√ß√£o de Disponibilidade

- **Planilhas de Agendamentos:**
  Cada profissional possui uma planilha com os agendamentos realizados. Essas planilhas indicam os dias e hor√°rios j√° ocupados.

  As planilhas estam organizadas abaixo:

{marca√ß√£o}

- **Regras para Agendamento:**
  - Os hor√°rios e dias **n√£o listados** na planilha de um profissional est√£o DISPON√çVEIS.
  - Os agendamentos s√£o permitidos apenas nos meses de **fevereiro, mar√ßo, abril e maio**.
  - Verifique se o per√≠odo dispon√≠vel √© suficiente para a dura√ß√£o do servi√ßo (evite sobreposi√ß√£o de hor√°rios).
  - O hor√°rio de in√≠cio do novo agendamento n√£o pode ser antes do hor√°rio de fim de um agendamento j√° existente.
  - O hor√°rio de fim do novo agendamento n√£o deve se sobrepor ao hor√°rio de in√≠cio de nenhum agendamento existente.
  - Quando o clinte informar um hor√°rio, some o hor√°rio √† dura√ß√£o do servi√ßo e verifique se tem sobreposi√ß√£o de hor√°rio da planilha.
  - Verifique se a marca√ß√£o n√£o ultrapassa o Hor√°rio de Atendimento

- **Observa√ß√£o:**
  Cada profissional √© considerado individualmente. Assim, √© poss√≠vel que, por exemplo, o cabelereiro esteja ocupado em um hor√°rio 
  enquanto a manicure esteja dispon√≠vel simultaneamente.

---

### 4. Atendimento e Confirma√ß√£o

- **Processo de Agendamento:**
  1. **Cumprimente** o cliente.
  2. **Identifique** o servi√ßo desejado e informe o pre√ßo e a dura√ß√£o com base na tabela.
  3. **Pergunte** a data, o hor√°rio preferido e o nome do cliente (se ainda n√£o informado).
  4. **Verifique** a disponibilidade do profissional respons√°vel:
     - Consulte a planilha do profissional para o dia solicitado.
     - Garanta que o intervalo dispon√≠vel √© suficiente para a dura√ß√£o do servi√ßo, sem conflitos com outros agendamentos ou com o hor√°rio de descanso.
  5. **Confirme** o agendamento e, se tudo estiver correto, gere um n√∫mero de protocolo de 6 d√≠gitos, diferente dos outros n√∫meros de protocolo.
  6. Informe o profissional, data, servi√ßo, hor√°rio, nome e protocolo da seguinte maneira nessa ordem:
      **Informa√ß√µes do agendamento**
      Profissional : Cabelereiro (Deve ser a profiss√£o e n√£o o nome do profissional)
      Data: 15/02/2025
      Servi√ßo: Corte feminino
      Hor√°rio de In√≠cio: 10:30
      Hor√°rio de Fim: 10:30
      Nome: Ana
      protocolo: 593684
  7. Informe que o cancelamento ou remarca√ß√£o s√≥ podera ser feita com o n√∫mero do protocolo.

- **Importante:**
  Nunca forne√ßa nomes de clientes, detalhes de agendamentos ou n√∫meros de protocolo de outros atendimentos.

---

### 5. Remarca√ß√£o e Cancelamento

- **Para remarcar ou cancelar:**
  - Solicite que o cliente informe o **n√∫mero de protocolo** gerado no agendamento.
  - Informe que somente com esse protocolo o servi√ßo pode ser alterado ou cancelado.

---

### 6. Regras para a Conversa

- **Foco:**
  A conversa deve tratar exclusivamente de agendamentos, remarca√ß√µes, cancelamentos e atendimento ao cliente.

- **Desvios:**
  Se o assunto se desviar do foco principal, repreenda o cliente e redirecione a conversa para os t√≥picos relacionados aos agendamentos.

- **Sigilo:**
  N√£o revele informa√ß√µes de outros clientes, agendamentos ja marcados ou protocolos alheios.

---

"""
from IPython.display import Markdown

import re
from openpyxl import load_workbook

# Fun√ß√£o para extrair os dados do agendamento da mensagem
def extrair_dados(mensagem):
    # Remover espa√ßos extras e quebras de linha antes de tentar capturar as informa√ß√µes
    mensagem = mensagem.replace('\n', ' ').strip()
    
    # Express√£o regular ajustada para capturar as informa√ß√µes do agendamento
    padrao = r"""
    -?\s*Profissional\s*:\s*(?P<profissional>[^:]+?)\s+  # Profissional
    -?\s*Data\s*:\s*(?P<data>\d{2}/\d{2}/\d{4})\s+       # Data
    -?\s*Servi√ßo\s*:\s*(?P<servico>[^:]+?)\s+            # Servi√ßo
    -?\s*Hor√°rio\ de\ In√≠cio\s*:\s*(?P<inicio>\d{2}:\d{2})\s+  # Hor√°rio de in√≠cio
    -?\s*Hor√°rio\ de\ Fim\s*:\s*(?P<fim>\d{2}:\d{2})\s+  # Hor√°rio de fim
    -?\s*Nome\s*:\s*(?P<nome>[^:]+?)\s+                 # Nome
    -?\s*Protocolo\s*:\s*(?P<protocolo>\d+)             # Protocolo
    """
    
    match = re.search(padrao, mensagem, re.VERBOSE)


    if match:
        return match.groupdict()
    else:
        return None

# Fun√ß√£o para atualizar a planilha com os dados extra√≠dos
def atualizar_planilha(agendamento, file_path="arquivo_excel.xlsx"):
    wb = load_workbook(file_path)
    planilha_profissional = wb[agendamento['profissional']] 

    ultima_linha = planilha_profissional.max_row + 1
    planilha_profissional.cell(row=ultima_linha, column=1, value=agendamento['data'])
    planilha_profissional.cell(row=ultima_linha, column=2, value=agendamento['profissional'])
    planilha_profissional.cell(row=ultima_linha, column=3, value=agendamento['servico'])
    planilha_profissional.cell(row=ultima_linha, column=4, value=agendamento['inicio'])
    planilha_profissional.cell(row=ultima_linha, column=5, value=agendamento['fim'])
    planilha_profissional.cell(row=ultima_linha, column=6, value=agendamento['nome'])
    planilha_profissional.cell(row=ultima_linha, column=7, value=agendamento['protocolo'])

    # Salvar a planilha ap√≥s atualizar
    wb.save(file_path)
    st.write("Planilha atualizada com sucesso!")

    # Fun√ß√£o para acessar a √∫ltima resposta do chatbot
def ultima_resposta(conversa):
    # A √∫ltima entrada do hist√≥rico de conversa √© a resposta do sistema (chatbot)
    resposta = conversa[-1]['content'] if conversa[-1]['role'] == 'system' else None
    return resposta

# Fun√ß√£o para verificar a √∫ltima resposta e atualizar a planilha se necess√°rio
def verificar_e_atualizar(conversa, file_path=arquivo_excel):

    # Acessar a √∫ltima resposta do chatbot
    resposta_do_chatbot = ultima_resposta(conversa)

    if resposta_do_chatbot and "Informa√ß√µes do agendamento" in resposta_do_chatbot: 
        # Extrair os dados da resposta
        agendamento = extrair_dados(resposta_do_chatbot)

        if agendamento:
            atualizar_planilha(agendamento, file_path)


#############################################################3

# Define o comportamento do assistente e inicializa a conversa
modelo = "gpt-4o-mini"

# Avatares para o usu√°rio e assistente
avatar_user = "üíá"  # Substitua pelo caminho correto
avatar_assistent = "üíá‚Äç‚ôÄÔ∏è"  # Substitua pelo caminho correto

# Inicializa o hist√≥rico da conversa
if "conversa" not in st.session_state:
    st.session_state.conversa = [{'role': 'system', 'content': sistema}]

# Exibe o hist√≥rico de mensagens com os avatares correspondentes
for msg in st.session_state.conversa[1:]:
    avatar = avatar_user if msg["role"] == "user" else avatar_assistent
    st.chat_message(msg["role"], avatar=avatar).write(msg["content"])

# Captura a entrada do usu√°rio
prompt = st.chat_input("Digite sua mensagem:")

if prompt:
    # Adiciona a mensagem do usu√°rio ao hist√≥rico
    st.session_state.conversa.append({'role': 'user', 'content': prompt})
    st.chat_message("user", avatar=avatar_user).write(prompt)

    # Faz uma requisi√ß√£o √† API OpenAI para gerar a resposta do assistente
    with st.chat_message("assistant", avatar=avatar_assistent):
        stream = client.chat.completions.create(
            model=modelo,
            messages=st.session_state.conversa,
            stream=True
        )

        # Exibe a resposta em tempo real
        response = st.write_stream(stream)

    # Adiciona a resposta ao hist√≥rico
    st.session_state.conversa.append({'role': 'system', 'content': response})
    
    # Verifica e atualiza a planilha se necess√°rio
    verificar_e_atualizar(st.session_state.conversa, file_path=arquivo_excel)

